[{"content":"牛客周赛Round31 A.小红小紫替换 判断即可\n$code:$\nvoid solve() { std::string s; std::cin \u0026gt;\u0026gt; s; std::cout \u0026lt;\u0026lt; (s == \u0026#34;kou\u0026#34; ? \u0026#34;yukari\u0026#34; : s) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } B.小红的因子数 看到数据范围为 $1e13$，$\\sqrt{1e13} \\approx 3e6$ 所以直接枚举根号以内的素因子即可\n复杂度 $O(\\sqrt{n})$\n$code:$\nvoid solve() { i64 x; std::cin \u0026gt;\u0026gt; x; int ans = 0; for(int i = 2; i \u0026lt;= x / i; i ++ ) { if(x % i == 0) { while(x % i == 0) { x /= i; } ans ++; } } ans += x \u0026gt; 1; std::cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } C.小红的字符串中值 首先观察到，中值左右俩边的字符数量一定相等，然后我们只需要枚举$S$中每一个等于询问字符的位置，然后计算左右两边能取到多少即可\nvoid solve() { int n; char o; std::cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; o; std::string s; std::cin \u0026gt;\u0026gt; s; i64 ans = 0; for(int i = 0; i \u0026lt; n; i ++ ) { if(s[i] == o) { i64 l = i, r = n - i - 1; ans += std::min(l, r) + 1; } } std::cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } D.小红数组操作 模拟链表即可，每个数维护一个节点，记录左右相连的值，模拟操作\nvoid solve() { int q; std::cin \u0026gt;\u0026gt; q; std::map\u0026lt;int, int\u0026gt; l, r; r[0] = -1; int siz = 0; while(q -- ) { int op, x, y; std::cin \u0026gt;\u0026gt; op; if(op == 1) { std::cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; r[x] = r[y]; l[x] = y; l[r[y]] = x; r[y] = x; siz ++; } else { std::cin \u0026gt;\u0026gt; x; r[l[x]] = r[x]; l[r[x]] = l[x]; siz --; } } std::cout \u0026lt;\u0026lt; siz \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; int now = r[0]; while(now != -1) { std::cout \u0026lt;\u0026lt; now \u0026lt;\u0026lt; \u0026#39; \u0026#39;; now = r[now]; } } E.小红数组操作 因为数据范围比较小，我们能想到 $dp$，我们定义 $dp_i$ 表示的是所有元素和为 $i$ 时选择的元素数量最小为多少，对于每个数字有选和不选俩种情况，记录选择上一位选完的状态为 $dp$ ，当前位的状态为 $_dp$ ，当前状态能由上一位推出，并且没有影响，我们枚举上一位有的情况，然后对于 $a_i$ 选和不选俩种情况更新 $_dp$，实际上就是滚动数组，也可以记录位置，用二维 $dp$ ，同理 $$ 选：_dp[i - a[pos]] = std::min(_dp[i - a[pos]], dp[i] + 1) \\newline 不选：_dp[i + a[pos]] = std::min(_dp[i + a[pos]], dp[i]); \\newline 注意：这里如果 _dp 中没有这个元素就直接更新 $$ $code:$\nvoid solve() { int n; std::cin \u0026gt;\u0026gt; n; std::vector\u0026lt;int\u0026gt; a(n); for(int i = 0; i \u0026lt; n; i ++ ) { std::cin \u0026gt;\u0026gt; a[i]; } std::map\u0026lt;int, int\u0026gt; dp; dp[0] = 0; for(int i = 0; i \u0026lt; n; i ++ ) { std::map\u0026lt;int, int\u0026gt; _dp; for(auto [v, y] : dp) { if(!_dp.count(v - a[i])) { _dp[v - a[i]] = y + 1; } else { _dp[v - a[i]] = std::min(_dp[v - a[i]], y + 1); } if(!_dp.count(v + a[i])) { _dp[v + a[i]] = y; } else { _dp[v + a[i]] = std::min(_dp[v + a[i]], y); } } dp = _dp; } std::cout \u0026lt;\u0026lt; (dp.count(0) ? dp[0] : -1) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } F.小红的连续段 $code:$\nvoid solve() { int x, y; std::cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; static constexpr int P = 1e9 + 7; std::vector\u0026lt;i64\u0026gt; fac(1001), invfac(1001), inv(1001); fac[0] = invfac[0] = fac[1] = invfac[1] = inv[1] = 1; for(int i = 2; i \u0026lt;= 1000; i ++ ) { inv[i] = (P - P / i * inv[P % i] % P) % P; fac[i] = fac[i - 1] * i % P; invfac[i] = invfac[i - 1] * inv[i] % P; } auto C = [\u0026amp;](i64 n, i64 m) -\u0026gt; i64 { if(m \u0026gt; n) return 0; return fac[n] * invfac[n - m] % P * invfac[m] % P; }; std::vector\u0026lt;i64\u0026gt; ans(x + y + 1); for(int i = 1; i \u0026lt;= x - 1; i ++ ) { ans[2 * i + 1] = (ans[2 * i + 1] + C(x - 1, i) * C(y - 1, i - 1) % P) % P; } for(int i = 0; i \u0026lt;= x - 1; i ++ ) { ans[2 * i + 2] = (ans[2 * i + 2] + C(x - 1, i) * C(y - 1, i) % P) % P; } for(int i = 1; i \u0026lt;= y - 1; i ++ ) { ans[2 * i + 1] = (ans[2 * i + 1] + C(y - 1, i) * C(x - 1, i - 1) % P) % P; } for(int i = 0; i \u0026lt;= x - 1; i ++ ) { ans[2 * i + 2] = (ans[2 * i + 2] + C(y - 1, i) * C(x - 1, i) % P) % P; } for(int i = 1; i \u0026lt;= x + y; i ++ ) { std::cout \u0026lt;\u0026lt; ans[i] \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } } ","permalink":"/posts/acm/%E7%89%9B%E5%AE%A2%E5%91%A8%E8%B5%9Bround31/","summary":"牛客周赛Round31 A.小红小紫替换 判断即可 $code:$ void solve() { std::string s; std::cin \u0026gt;\u0026gt; s; std::cout \u0026lt;\u0026lt; (s == \u0026#34;kou\u0026#34; ? \u0026#34;yukari\u0026#34; : s) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } B.小红的因子数 看到数据范围为 $1e13$，$\\sqrt{1e13} \\approx 3e6$ 所以直接枚举根号以内的素因子即可 复杂度 $O(\\sqrt{n})$ $code:$ void solve() { i64 x; std::cin \u0026gt;\u0026gt; x; int ans = 0; for(int i = 2; i \u0026lt;= x / i; i ++ ) { if(x % i == 0) { while(x % i == 0) { x /=","title":"牛客周赛Round31"},{"content":"组合数学 排列与组合 1.帕斯卡公式 $$ 对于所有满足 1\\le k \\le n-1的整数 n 和 k,有 \\newline \\tbinom{n}{k} = \\tbinom{n - 1}{k} + \\tbinom{n - 1}{k - 1} $$\n","permalink":"/posts/acm/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/","summary":"组合数学 排列与组合 1.帕斯卡公式 $$ 对于所有满足 1\\le k \\le n-1的整数 n 和 k,有 \\newline \\tbinom{n}{k} = \\tbinom{n - 1}{k} + \\tbinom{n - 1}{k - 1} $$","title":"组合数学"},{"content":"hello $$ \\frac{a_i^{j}}{n} $$\n","permalink":"/posts/acm/blog/","summary":"hello $$ \\frac{a_i^{j}}{n} $$","title":"Blog"},{"content":" \u0026lt; friend name=\u0026ldquo;Sulv\u0026rsquo;s Blog\u0026rdquo; url=\u0026ldquo;https://www.sulvblog.cn\u0026rdquo; logo=\u0026ldquo;https://www.sulvblog.cn/img/Q.gif\u0026quot; word=\u0026ldquo;一个记录技术、阅读、生活的博客\u0026rdquo; \u0026gt;\n👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群 787018782\n","permalink":"/links/","summary":"\u0026lt; friend name=\u0026ldquo;Sulv\u0026rsquo;s Blog\u0026rdquo; url=\u0026ldquo;https://www.sulvblog.cn\u0026rdquo; logo=\u0026ldquo;https://www.sulvblog.cn/img/Q.gif\u0026quot; word=\u0026ldquo;一个记录技术、阅读、生活的博客\u0026rdquo; \u0026gt; 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内 👉Hugo博客交流群 787018782","title":"🤝友链"},{"content":"关于我\n名字: shift 职业: 学生 爱好: 不知道 ","permalink":"/about/","summary":"关于我 名字: shift 职业: 学生 爱好: 不知道","title":"🙋🏻‍♂️关于"}]